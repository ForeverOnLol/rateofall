from aiogram.types import message

from common.views import CommonView
from config import bot_link, send_word_seconds
from telegram.consts import bot


class LobbyView(CommonView):
    @staticmethod
    async def add_member(name: str):
        return f'{name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ª–æ–±–±–∏'

    @staticmethod
    async def delete():
        return f'–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É!'

    @staticmethod
    async def already_in(name: str):
        return f'{name} —É–∂–µ –≤ –ª–æ–±–±–∏'

    @staticmethod
    async def get_members(members_list: []):
        members_str = "\n".join(str(member) for member in members_list)
        return "–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n" + members_str

    @staticmethod
    async def destroy(chat_id):
        await bot.send_message(chat_id=chat_id,
                               text='–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É. –õ–æ–±–±–∏ —Ä–∞—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ. '
                                    '–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ–±–Ω—É–ª—ë–Ω. –•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è! üòä')

    @staticmethod
    async def error(error_text, chat_id: int):
        await bot.send_message(chat_id=chat_id, text=error_text)


class WordProviderTgView():
    @staticmethod
    async def start(chat_id: int):
        await bot.send_message(chat_id=chat_id,
                               text=f'üìù *–ü–µ—Ä–µ–π–¥–∏—Ç–µ —Å—é–¥–∞* {bot_link} *–∏ –≤–≤–æ–¥–∏—Ç–µ —Ç–µ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç.*\n'
                                    f'üîí *–í –±–ª–∏–∂–∞–π—à–∏–µ {send_word_seconds} —Å–µ–∫—É–Ω–¥ –¥–æ—Å—Ç—É–ø –∑–∞–∫—Ä–æ–µ—Ç—Å—è.* üîí \n'
                                    f'*–ö–∞–∫ —Ç–æ–ª—å–∫–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–º—ã - –≤–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å.*')

    @staticmethod
    async def timer_timeout(chat_id: int):
        await bot.send_message(chat_id=chat_id, text=f'üîí–í—ã –±–æ–ª—å—à–µ –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–º—ã –≤ –õ–° –±–æ—Ç–∞üîí')

    @staticmethod
    async def error(error_text, chat_id: int):
        await bot.send_message(chat_id=chat_id, text=error_text)

    @staticmethod
    async def fill_word(message: message, remain_count):
        await message.answer(text=f'–ó–∞–ø–∏—Å–∞–ª. –û—Å—Ç–∞–≤—à–µ–µ—Å—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ: {remain_count}')
